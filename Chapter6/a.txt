[1. 소프트웨어 설계]
요구사항 확인
요구분석
- 요구사항분석에 사용하는 기능 모델링 기법
1. 데이터 흐름도(DFD)	2. 자료사전
UML(Unified Modeling Language)
 : 객체지향 소프트웨어 개발과정에서 산출물을 명세화, 시각화, 문서화할 때 사용되는 모델링 기술과 방법론을 통합해서 만든 표준화된 범용 모델링 언어
- 구성요소 : 사물, 관계, 다이어그램
- 다이어그램
. 구조적(정적)다이어그램 : 클래스, 객체, 컴포넌트, 배치, 복합체 구조, 패키지
. 행위적(동적)다이어그램 : 유스케이스. 시퀀스, 커뮤니케이션, 상태, 활동, 타이밍
   * 클래스 다이어그램 : 클래스 이름, 속성, 연산, 접근 제어자
   * 유스케이스 다이어그램 : 유스케이스(서비스), 액터, 시스템
   * 시퀀스 다이어그램 : 객체, 생명선, 실행, 메시지
- UML 관계 : 연관(Association), 집합(Aggregation), 포함(Composition), 일반화(Generalization),  의존(Dependency), 실체화(Realization)
- UML 확장 모델의 스테레오 타입 : <<   >> 길러멧
애자일(Agile)
- 유형 : XP(eXtreme Programming), 린(Lean), 스크럼(SCRUM)
* XP 가치 : 용기, 단순성, 의사소통, 피드백, 존중

ㅇ UML 다이어그램 (2021.05)
Activity : 업무의 흐름을 모델링하거나 객체의 생명 주기를 표현하는 다이어그램
Sequence : 객체 간의 메시지 전달을 시간적 흐름에서 분석하는 다이어그램
Deployment : 기업 환경의 구성과 컴포넌트들 간의 관계를 그린 다이어그램
Collaboration : 객체와 객체가 주고받는 메시지 중심의 작성 동적 다이어그램인 다이어그램
Component : 소프트웨어 구조가 그리는 다이어그램
Class : 시스템의 구조적인 모습을 그리는 다이어그램
ㅇ UML 모델 한 객체가 다른 객체에게 오퍼레이션을 수행하도록 지정하는 의미적 관계 (2021.05)
Dependency(의존) : 한 사물의 명세서가 바뀌면 그것을 사용하는 다른 사물에게 영향을 끼치는 것 (Cascade)
Realization(실체화) : 한 객체가 다른 객체에 의해 오퍼레이션을 수행하도록 지정
Generalization(일반화) : 일반화된 사물과 좀 더 특수화된 사물 사이의 관계 ('is-a')관계
Association(연관) : 두 사물간의 구조적 관계로, 어느 한 사물 객체가 다른 사물 객체와 연결되어 있음 ('has-a')관계.

요구사항 분석 자동화 도구(CASE: Computer-Aided Software Engineering)  : 그래픽
- 분류 : 상위 CASE (다이어그램, 검사/검증, 자료흐름도/UI)		
하위 CASE (적적/동적테스트, 소스코드 생성)
ㅇ CASE(Computer-Aided Software Engineering)의 원천기술 (2021.05)
 : 구조적 기법, 프로토타이핑 기법, 자동프로그래밍 기술, 정보 저장소 기술, 분산 처리 기술

UI 설계

애플리케이션 설계
공통모듈
모듈화
- 모듈화 유형 : 응집도, 결합도
- Fan-In  Fan-Out
설계 모델링
- 설계 모델링 유형 : 구조 모델링(프로시저, 데이터 구조, 모듈, 파일 구조), 행위 모델링(데이터)
- 소프트웨어 설계 유형 : 자료구조, 아키텍쳐(컴포넌트), 인터페이스(통신), 프로시저,  : 상위// 
협약(선행/결과/불변), // 모듈설계 : 하위
- 코드 설계
. 코드 기능 : 표준화, 분류, 식별 배열, 간소화, 연상, 암호화, 오류 검출
. 설계 종류 : 연상코드, 블록코드, 순차코드, 표의 숫자코드, 십진 코드, 그룹 분류식 코드
- HIPO(Hierarchy Input Process Output) : 시스템의 분석 및 설계, 문서화할 때 사용, 하향식 SW개발을 위한 문서화 도구
. HIPO 차트 종류 : 가시적 도표, 총체적 도표, 세부적 도표
객체지향 
- 구성요소 : 클래스, 객체, 메서드, 메시지, 인스턴스, 속성
- 객체지향 기법 : 캡슐화(Encapsulation), 상속성(Inheritance), 다형성(Polymorphism), 
추상화(Abstraction), 정보은닉(Information Hiding), 관계성(Relationship)
. 관계성 : 연관화(is-member-of), 집단화(is part of, part-whole), 분류화(is-instance-of), 
일반화(is-a), 특수화(is-a)
- 객체지향 설계 원칙(SOLID)
 : 단일 책임의 원칙(Single Responsibility), 개방 폐쇄의 원칙(Open Close), 리스코프 치환의 법칙(Liskov Substitution), 인터페이스 분리의 법칙(Interface Segregation), 의존성 역전의 법칙(Dependenct Inversion)
- 객체지향 방법론 종류
 : 야콥슨(유스케이스 모델), 럼바우 Rumbaugh(객체 모델링(정적)  동적 모델링  기능모델링(데이터)), 부치, Coad와 Yourdon 방법론(E-R 다이어그램), Wirfs-Brock 방법론
디자인 패턴
: SW 공학의 SW 설계에서 공통으로 발생하는 문제에 대해 자주 쓰이는 설계 방법을 정리한 패턴
- 유형 : 목적(생성/구조/행위), 범위(클래스(컴파일)/객체(런타임))
- GoF(Gang of Four) 디자인 패턴 종류
. 생성패턴 : Builder, Prototype, Factory Method, Singleton
. 구조패턴 : Bridge, Decorator, Flyweight, Composite, Adapter
. 행위패턴 : Command, Observer, State, Strategy, Visitor
ㅇ GoF(Gangs of Four) 디자인 패턴 중 생성패턴 (2021.05)
- 생성패턴: 객체를 생성하는 것에 대한 패턴
추상팩토리 패턴, 빌더 패턴, 팩토리 메소드 패턴, 프로토타입 패턴, 싱글톤 패턴
- 구조 패턴: 구조를 통해 확장성을 꾀하는 패턴
어댑터 패턴, 브릿지 패턴, 컴포지트 패턴, 데코레이터 패턴, 퍼사드 패턴, 플라이웨잇 패턴, 프록시 패턴
- 행위 패턴: 행위의 변경, 수정 등을 위한 패턴
역할 사슬 패턴, 커맨드 패턴, 인터프리터 패턴, 이터레이터 패턴, 미디에이터 패턴, 메멘토 패턴, 옵저버 패턴, 스테이트 패턴, 스트래티지 패턴, 템플릿 메소드 패턴, 비지터 패턴

1. singleton pattern(단일체): 한 클래스에 한 객체만 존재하도록 제한한다(생성패턴)
2. adapter pattern(적응자): 인터페이스가 호환되지 않는 클래스들을 함께 이용할 수 있도록, 타 클래스의 인터페이스를 기존 인터페이스에 덧씌운다(구조패턴)
3. decorator pattern(장식자): 0개, 1개 혹은 그 이상의 객체를 묶어 하나의 객체로 이용할 수 있다(구조패턴)
4. state pattern(상태): 동일한 동작을 객체의 상태에 따라 다르게 처리해야 할 때 사용하는 디자인 패턴(행위패턴)

인터페이스 설계
요구공학
: 사용자 요구사항에 대한 도출, 분석, 명세, 확인 및 검증하는 구조화된 활동
- 요구공학 프로세스
1. 요구사항 개발(CMM 레벨3) : 도출, 분석, 명세 확인 및 검증
2 요구사항 관리(CMM 레벨2) : 요구사항 변경 관리, 추적 관리
 * 요구사항 개발
1. 도출
2. 분석
3. 명세
  . 기법 : 비정형(자연어 기반, 이해가 용이, 명확성 및 검증 문제) / 정형(수학적, 이해가 어려움, 표현이 간결, 명확성 및 검증이 용이, 명세 언어: Z-스키마, Petri Nets, 상태 차트 활용)
4. 확인 및 검증
  . 기법 : 요구사항 검토, 정형 기술 검토(동료검토/워크스루/인스펙션), 프로토타이핑 활용, 모델 검증, 테스트 케이스 및 테스트를 통한 확인, CASE도구 활용 검증, 베이스라인을 통한 검증, 요구사항 추적표(RTM)를 통한 검증
ㅇ 요구사항 개발 프로세스 순서 (2021.05)
 요구사항을 도출해야 분석하고, 분석해야 자세히 쓸 수 있고(=명세), 명세를 검토(=확인)해야한다.
인터페이스 시스템
: 서로 다른 두 시스템/장치/소프트웨어를 서로 이어주는 접속 및 중계 시스템
- 시스템 구성 : 송신 시스템, 연계 시스템, 중계 서버

ㅇ 인터페이스를 구성하는 시스템으로, 연계할 데이트를 데이터베이스와 애플리케이션으로부터 연계 테이블 또는 파일 형태로 생성하여 송신하는 시스템 (2021.05)
* 연계시스템 구성
1) 송신 시스템
  연계할 데이터를 DB와 어플리케이션으로부터 연계테이블 또는 파일 형태로 생성하여 송신
2) 수신 시스템
  수신한 연계테이블, 파일데이터를 수신시스템에서 관리하는 데이터 형식에 맞게 변환하여 DB에 저장하거나 애플리케이션에서 활용할 수 있도록 제공
3) 중계 서버
  송/수신 시스템 사이에서 데이터를 송수신하고, 연계데이터의 송수신 현황을 모니터링함, 연계데이터의 보안강화 및 다중플랫폼 지원 등이 가능
미들웨어 솔루션
- 솔루션 유형 : DB미들웨어, 원격 프로시저 호출(RPC: Remote Procedure Call), 메시지 지향 미들웨어(MOM: Message-Oriented Middleware), 트랜젝션 처리 모니터(TP Monitor), 객체 기반(ORB: Object Request Brokers), WAS(Web Application Server)
- EAI와 ESB

[1. 소프트웨어 설계]
ㅇ 소프트웨어 아키텍처 설계에서 시스템 품질속성 (2021.05)
 : 가용성, 변경용이성, 성능, 사용편의성, 시험용의성

[5. 소프트웨어 개발방법론 활용]
소프트웨어 개발방법론 활용
소프트웨어 생명주기(SDLC: Software Development Life Cycle) 모델
- 종류 : 폭포수모델(타당성검토계획요구사항분석설계구현테스트), 프로토타이핑 모델, 
나선형모델(계획 및 정의위험분석개발고객평가), 반복적모델
소프트웨어 개발방법론
- 종류 : 구조적 방법론(분할 정복, 하향식, 나씨-슈나이더먼 차트(도형식 표현/제어논리구조표현)), 정보공학 방법론, 객체지향 방법론, 컴포넌트 기반 방법론(CBD), 애자일 방법론(Agile), 제품 계열 방법론
요구공학 방법론
- SADT : 구조적 요구분석을 하기 위해 블록 다이어그램을 채택한 자동화 도구
비용산정 모델
- 분류 : 하향식(전문가기법, 델파이기법), 상향식(코드라인수(LOC), Man Month, COCOMO 모형, Putnam 모형, FP(Function Point)모형
 . COCOMO 모형 : 조직형(Organic), 반 분리형(Semi-Detached), 임베디드형(Embedded)
 . 푸트남(Putnam) : 시간에 따른 함수로 표현되는 Rayleigh-Norden곡선의 노력분포도 기초 (SLIM)
일정관리모델
- 종류 : 주 공정법(CPM), PERT(Program Evaluation and Review Technique), 중요 연쇄 프로젝트 관리(CCPM)

ㅇ CBD(Component Based Development) SW개발 표준산출물 중 분석단계에 해당하는 것(2021.05)
1. 클래스 설계서 2. 통합시험 설계서 3. 프로그램 코드 4. 사용자 요구사항 정의서
기존의 시스템이나 소프트웨어를 구성하는 "컴포넌트를 조합"하여 하나의 새로운 어플리케이션을 만드는 방법론

CBD 방법론의 개발 공정
1. 요구파악 단계 → 요구사항 기술서, 용어 사전, 개념 모델, 유즈케이스 모델
2. 분석 및 설계 → 객체 모델, UI 설계서, 아키텍처 기술서, 인터페이스 명세서, 컴포넌트 명세서, 컴포넌트 설계서, 데이터베이스 설계서
3. 구현 → 개발 표준 정의서, 플랫폼 종속적 코드
4. 테스트 → 테스트 계획서, 컴포넌트 테스트 보고서, 통합 테스트 보고서, 인수테스트 보고서
소프트웨어 개발방법론 테일러링
소프트웨어 개발 표준
- ISO/IEC 12207표준
- CMMI
. CMM(I) 단계적 표현의 성숙도 레벨 : 1.초기화 2.관리 3.정의 4.정량적 관리 5.최적화
- SPICE : SW 프로세스에 대한 품질 평가
. SPICE 프로세스 수행능력 수준 : 0.불안정 1.수행 2.관리 3.확립 4.예측 5.최적화
테일러링 기준
조직의 표준 프로세스를 커스터마이징 (재활용 계획 수립 기법)
- 기준 : 내부적기준(목표환경, 요구사항, 프로젝트 특성, 구성원 능력)/ 외부적기준(국제표준 품질기준, 법적규제)
소프트웨어 재사용
- 방법 : 합성중심(블록구성 방법), 생성중심(패턴 구성 방법)

ㅇ ISO 12207 표준의 기본 생명주기의 주요 프로세스에 해당하지 않는 것은? (2021.05)
소프트웨어의 생명 주기 동안 필요한 소프트웨어 제품의 획득, 공급, 개발, 운영, 유지보수 등으로 구성된다.

- 기본 생명 주기 프로세스 : 획득, 공급, 개발, 운영, 유지보수 프로세스
- 지원 생명 주기 프로세스 : 품질 보증, 검증, 확인, 활동 검토, 문제 해결 프로세스
- 조직 생명 주기 프로세스 : 관리, 기반 구조, 훈련, 개선 프로세스




소프트웨어 개발 보안 구축
SW개발 보안
- 3대 요소 : 기밀성(Confidentiality), 무결성(Integrity), 가용성(Availability)
- 보안용어 : 자산(Asset), 위협(Threat), 취약점(Vulnerability), 위험(Risk), 
입력 데이터 검증 및 표현
- 취약점 : XSS(사용자가 웹페이지 열람 부적절한 스크립트 실행되는 공격), CSRF(사이트간 요청 위조, 사용자가 자신의 의지와 무관 공격자가 의도한 행위를 특정 웹사이트에 요청하게 하는 공격), SQL삽입 
암호 알고리즘
- 방식
 . 양방향 방식
   1) 대칭키 암호 방식(암호화 = 복호화)
     1-1) 알고리즘 : 블록 암호 방식(DES, AES, SEED)  /  스트림 암호 방식(RC4)
   2) 비대칭 키 암호 방식(=공개키 암호방식, 암호화 != 복호화)
     2-1) 알고리즘 : 디피-헬만(Diffie-Helllman) :이산대수, RSA : 소인수분해, ECC, EIGAMAL
. 일방향 암호 방식(해시 암호 방식) : 복호화 불가능
  - 알고리즘 : MD5, SHA-1, SHA-256/384/512, HAS-160
코드 오류

ㅇ 암호키와 복호화키가 동일한 암호화 알고리즘 (2021.05)
암호화 키와 복호화 키가 동일한 암호화 알고리즘은 개인키(=대칭키=단일키) 암호화 기법이다.

1. 특징
암호화/복호화 속도가 빠르다.
알고리즘이 단순하다.
파일의 크기가 작다.
사용자의 증가에 따라 관리해야 할 키의 수가 상대적으로 많아진다.

2. 분류
블록 암호화 방식: 한번에 하나의 데이터 블록을 암호화함 ex)DES, SEED, AES, ARIA
스트림 암호화 방식: 평문과 동일한 길이의 스트림을 생성하여 비트 단위로 암호화함 ex)LFSR, RC4

ㅇ 코드의 기입 과정에서 원래 '12536‘으로 기입되어야 하는데 ’12936‘으로 표기되었을 경우, 어떤 코드 오류 (2021.05)
* 사본오류(Transcription Error) : 작업자나 광 문자 인식(OCR) 프로그램에서 발생하는 데이터 입력 오류
* 생략 오류(omission error) : 입력 시 한 자리를 빼놓고 기록한 경우 (1234 → 123)
* 필사 오류(Transcription error) : 입력 시 임의의 한 자리를 잘못 기록한 경우 (1234 → 1235)
* 전위 오류(Transposition error) : 입력 시 좌우 자리를 바꾸어 기록한 경우 (1234 → 1243)
* 이중 오류(Double Transposition error) : 전위 오류가 두 가지 이상 발생한 경우 (1234 → 2143)
* 추가 오류(Addition error) : 입력 시 한 자리 추가로 기록한 경우 (1234 → 12345)
* 임의 오류(Random error) : 위의 오류가 두 가지 이상 결합하여 발생한 경우 (1234 → 12367)

시스템 보안 구축
서비스 공격 유형
- DoS 공격 : SYN Flooding, UDP Flooding, 스머핑, 죽음의 핑(PoD: Ping of Death), 랜드 어텍, 티어 드롭, 봉크
- DDoS 공격 : 도구 Trinoo, Tribe Flood Network, Stacheldraht
- DRDoS


[5. 소프트웨어 개발방법론 활용]
ㅇ 접근제어 모델
- 군대의 보안 레벨처럼 정보의 기밀성에 따라 상하 관계가 구분된 정보를 보호하기 위해 사용
- 자신의 권한보다 낮은 보안 레벨 권한을 가진 경우에는 높은 보안 레벨의 문서를 읽을 수 없고 자신의 권한보다 낮은 수준의 문서만 읽을 수 있다.
- 자신의 권한보다 높은 보안 레벨은 문서에는 쓰기가 가능하지만 보안레벨이 낮은 문서의 쓰기 권한은 제한한다.
 Bell-Lapadula Model
. BLP 기밀성 모델: 정보의 불법적인 파괴나 변조보다는 불법적인 비밀 유출 방지에 중점 - 기밀성 강조
 . Clark-Wilson 무결성 모델: 비밀 노출 방지보다 자료의 변조 방지가 더 중요함(금융, 회계관련 데이터, 기업 재무재표 등)
 . Chinese Wall: 충돌을 야기시키는 어떠한 정보의 흐름도 없어야 한다. 이익의 충돌 금지, 최근 일을 한 적 있는 파트너는 동일 영역에 있는 다른 회사 자료에 접근해서는 안된다.
ㅇ 하둡(Hadoop)과 관계형 데이터베이스간에 데이터를 전송할 수 있도록 설계된 도구
스쿱(Sqoop) : 커넥터를 사용하여 관계형 디비시스템(RDBMS)에서 HDFS로 데이터를 수집하는 빅데이터 기술
ㅇ IPSec(IP Security)에 대한 설명으로 틀린 것은?
IPSec : IP계층(3계층)에서 무결성과 인증 보장하는 인증헤더와 기밀성 보장하는 암호화 이용해 양 종단 구간에 보안 서비스 제공하는 터널링 프로토콜, 운영 모드는 Tunnel모드와 Transport모드로 분류
* IPSec의 세부프로토콜
- IKE(Internet Key Exchange) : 보안 관련 설정들을 생성, 협상 및 관리하는 프로토콜(udp500번 포트 사용)
- ESP(Encapsulating Security Payload) : 메세지 인증코드,암호화 이용해 "인증(무결성)","발신지인증","기밀성" 제공 프로토콜
- AH(Authentication Header) : 기밀성 제외한 메시지 인증코드 이용한 "인증(무결성)","발신지인증"제공 프로토콜
ㅇ 침입차단 시스템(방화벽) 중 다음과 같은 형태의 구축 유형




스크린 서브넷(Screen Subnet) : 외부 네트워크와 내부 네트워크 사이에 두는 완충적인 통신망
